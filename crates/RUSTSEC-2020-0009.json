{
  "id": "RUSTSEC-2020-0009",
  "modified": "2021-06-23T21:24:04+00:00",
  "published": "2020-04-11T12:00:00+00:00",
  "aliases": [
    "CVE-2020-35864"
  ],
  "related": [],
  "summary": "`read_scalar` and `read_scalar_at` allow transmuting values without `unsafe` blocks",
  "details": "The `read_scalar` and `read_scalar_at` functions are unsound\nbecause they allow transmuting values without `unsafe` blocks.\n\nThe following example shows how to create a dangling reference:\n\n```\nfn main() {\n    #[derive(Copy, Clone, PartialEq, Debug)]\n    struct S(&'static str);\n    impl flatbuffers::EndianScalar for S {\n        fn to_little_endian(self) -> Self { self }\n        fn from_little_endian(self) -> Self { self }\n    }\n    println!(\"{:?}\", flatbuffers::read_scalar::<S>(&[1; std::mem::size_of::<S>()]));\n}\n```",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "flatbuffers",
        "purl": "pkg:cargo/flatbuffers"
      },
      "ecosystem_specific": {
        "affects": {
          "arch": [],
          "os": [],
          "functions": [
            "flatbuffers::read_scalar",
            "flatbuffers::read_scalar_at"
          ]
        }
      },
      "database_specific": {
        "categories": [],
        "cvss": null,
        "informational": null
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.4.0"
            },
            {
              "fixed": "2.0.0"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/flatbuffers"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2020-0009.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/google/flatbuffers/issues/5825"
    }
  ]
}