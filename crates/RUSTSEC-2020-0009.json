{
  "id": "RUSTSEC-2020-0009",
  "modified": "2021-01-04T17:02:59+00:00",
  "published": "2020-04-11T12:00:00+00:00",
  "aliases": [
    "CVE-2020-35864"
  ],
  "related": [],
  "package": {
    "ecosystem": "crates.io",
    "name": "flatbuffers",
    "purl": "pkg:cargo/flatbuffers"
  },
  "summary": "`read_scalar` and `read_scalar_at` allow transmuting values without `unsafe` blocks",
  "details": "The `read_scalar` and `read_scalar_at` functions are unsound\nbecause they allow transmuting values without `unsafe` blocks.\n\nThe following example shows how to create a dangling reference:\n\n```\nfn main() {\n    #[derive(Copy, Clone, PartialEq, Debug)]\n    struct S(&'static str);\n    impl flatbuffers::EndianScalar for S {\n        fn to_little_endian(self) -> Self { self }\n        fn from_little_endian(self) -> Self { self }\n    }\n    println!(\"{:?}\", flatbuffers::read_scalar::<S>(&[1; std::mem::size_of::<S>()]));\n}\n```",
  "affects": {
    "ranges": [
      {
        "kind": "SEMVER",
        "introduced": "0.4.0"
      }
    ]
  },
  "references": [
    {
      "kind": "PACKAGE",
      "url": "https://crates.io/crates/flatbuffers"
    },
    {
      "kind": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2020-0009.html"
    },
    {
      "kind": "REPORT",
      "url": "https://github.com/google/flatbuffers/issues/5825"
    }
  ],
  "ecosystem_specific": {
    "affects": {
      "arch": [],
      "os": [],
      "functions": [
        "flatbuffers::read_scalar",
        "flatbuffers::read_scalar_at"
      ]
    }
  },
  "database_specific": {
    "categories": [],
    "cvss": null,
    "informational": null
  }
}