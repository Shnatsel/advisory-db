{
  "id": "RUSTSEC-2020-0141",
  "modified": "2021-02-01T13:58:53+00:00",
  "published": "2020-12-10T12:00:00+00:00",
  "aliases": [],
  "related": [],
  "package": {
    "ecosystem": "crates.io",
    "name": "noise_search",
    "purl": "pkg:cargo/noise_search"
  },
  "summary": "MvccRwLock allows data races & aliasing violations",
  "details": "Affected versions of this crate unconditionally implement Send/Sync for `MvccRwLock`.\nThis can lead to data races when types that are either `!Send` or `!Sync` (e.g. `Rc<T>`, `Arc<Cell<_>>`) are contained inside `MvccRwLock` and sent across thread boundaries. The data races can potentially lead to memory corruption (as demonstrated in the PoC from the original report issue).\n\nAlso, safe APIs of `MvccRwLock` allow aliasing violations by allowing `&T` and `LockResult<MutexGuard<Box<T>>>` to co-exist in conflicting lifetime regions. The APIs of `MvccRwLock` should either be marked as `unsafe` or `MbccRwLock` should be changed to private or pub(crate).",
  "affects": {
    "ranges": [
      {
        "type": "SEMVER"
      }
    ]
  },
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/noise_search"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2020-0141.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/pipedown/noise/issues/72"
    }
  ],
  "ecosystem_specific": {
    "affects": {
      "arch": [],
      "os": [],
      "functions": []
    }
  },
  "database_specific": {
    "categories": [
      "memory-corruption",
      "thread-safety"
    ],
    "cvss": null,
    "informational": null
  }
}