{
  "id": "RUSTSEC-2021-0012",
  "modified": "2021-02-26T01:00:25+00:00",
  "published": "2021-01-02T12:00:00+00:00",
  "aliases": [
    "CVE-2021-26305"
  ],
  "related": [],
  "package": {
    "ecosystem": "crates.io",
    "name": "cdr",
    "purl": "pkg:cargo/cdr"
  },
  "summary": "Reading uninitialized memory can cause UB (`Deserializer::read_vec`)",
  "details": "`Deserializer::read_vec()` created an uninitialized buffer and passes it to a user-provided `Read` implementation (`Deserializer.reader.read_exact()`).\n\nPassing an uninitialized buffer to an arbitrary `Read` implementation is currently defined as undefined behavior in Rust. Official documentation for the `Read` trait explains the following: \"It is your responsibility to make sure that buf is initialized before calling read. Calling read with an uninitialized buf (of the kind one obtains via MaybeUninit<T>) is not safe, and can lead to undefined behavior.\"\n\nThe flaw was corrected in commit ce310f7 by zero-initializing the newly allocated buffer before handing it to `Deserializer.reader.read_exact()`.",
  "affects": {
    "ranges": [
      {
        "type": "SEMVER",
        "fixed": "0.2.4"
      }
    ]
  },
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/cdr"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2021-0012.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/hrektts/cdr-rs/issues/10"
    }
  ],
  "ecosystem_specific": {
    "affects": {
      "arch": [],
      "os": [],
      "functions": []
    }
  },
  "database_specific": {
    "categories": [
      "memory-exposure"
    ],
    "cvss": null,
    "informational": null
  }
}